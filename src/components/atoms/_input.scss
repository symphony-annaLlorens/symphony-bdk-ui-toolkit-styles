body {
  --tk-input-padding-height: #{toRem(6)};
  --tk-input-padding-width: #{toRem(12)};

  --tk-input-spacing-height: #{toRem(6)};
  --tk-input__container-padding: 0 #{toRem(12)};
  --tk-input__icon-font-size: #{toRem(16)};
  --tk-input__icon-margin-right: #{toRem(8)};
  --tk-textarea-min-height: #{toRem(128)};
}

.tk-input--small {
  --tk-input-padding-height: #{toRem(2)};
  --tk-input-padding-width: #{toRem(8)};

  --tk-textarea-min-height: #{toRem(116)};
  --tk-textarea-padding-right: #{toRem(12)};
}
.tk-input--medium {
  --tk-input-padding-height: #{toRem(6)};
  --tk-input-padding-width: #{toRem(12)};

  --tk-textarea-min-height: #{toRem(128)};
}
.tk-input--large, .tk-select--large {
  --tk-input-padding-height: #{toRem(10)};
  --tk-input-padding-width: #{toRem(16)};
}

.tk-input__container {
  &--small {
    --tk-input__icon-font-size: #{toRem(12)};
  }
  .tk-input {
    --tk-input-padding-height: 0;
    --tk-input-padding-width: #{toRem(12)};
  }
  .tk-input--small {
    --tk-input-spacing-height: #{toRem(2)};
  }
  .tk-input--medium {
    --tk-input-spacing-height: #{toRem(6)};
  }
  .tk-input--large {
    --tk-input-spacing-height: #{toRem(10)};
  }
}

@include condensed {
  &.tk-input,
  &.tk-input--medium,
  &.tk-select,
  &.tk-select--medium {
    --tk-input-padding-height: #{toRem(2)};
    --tk-input-padding-width: #{toRem(8)};
  }
  &.tk-input--large,
  &.tk-select--large {
    --tk-input-padding-height: #{toRem(6)};
    --tk-input-padding-width: #{toRem(12)};
  }

  &.tk-input__container--medium {
    --tk-input-spacing-height: #{toRem(2)};
    --tk-input__container-padding: 0 #{toRem(8)};
    --tk-input__icon-font-size: #{toRem(12)};
    --tk-input__icon-margin-right: #{toRem(4)};
    --tk-input__hide-outline-offset: 0;
  }

  &.tk-input__container {
    .tk-input--medium {
      --tk-input-spacing-height: #{toRem(2)};
    }
    .tk-input--large {
      --tk-input-spacing-height: #{toRem(6)};
    }
  }

  &/*textarea*/.tk-input,
  &/*textarea*/.tk-input--medium {
    --tk-textarea-min-height: #{toRem(116)};
    --tk-textarea-padding-right: #{toRem(12)};
  }
}

.tk-input__container {
  position: relative;
}

.tk-input {
  &:read-only {
    @include styleInput(
      getColor($--tk-input-color, filledText),
      getColor($--tk-input-color, emptyText),
      getColor($--tk-input-color, readonly),
      getColor($--tk-input-color, readonly),
      getColor($--tk-input-color, readonly),
      getColor($--tk-input-color, readonlyBg)
    );
  }
  @include styleTKInput;
}

.tk-input__container {
  textarea.tk-input {
    padding-right: toRem(4);
  }
  @include styleTKInputContainer;

  border-color: transparent;
  outline: none;
  padding: 0 toRem(12);

  &.active {
    .tk-input {
      &__right-decorators {
        color: getColor($electricity, '50');
      }
    }
  }

  .tk-input {
    padding: 0;
    flex-grow: 1;
    line-height: toRem(20);

    @include cancelBorder;

    &__icon {
      order: -1;
      display: flex;
      align-self: center;
      justify-content: center;
      align-items: center;

      color: getColor($graphite, '50');

      margin-right: toRem(8);
      max-width: toRem(16);
      max-height: toRem(16);

      border-radius: toRem(4) 0 0 toRem(4);
      @include addTransition();
    }

    &__hide {
      max-height: toRem(39);
      font-size: toRem(12);
      line-height: toRem(16);
      padding: 0 toRem(2);
      background-color: transparent;
      color: getColor($--tk-input-hide-color, default);
      border: none;
      cursor: pointer;
      align-self: center;
      &:focus:not(:focus-visible) {
        outline: none;
      }
      @include addFocusStyle('false');
      outline-offset: toRem(2);
    }

    &__right-decorators {
      display: flex;
      i {
        align-self: center;
      }
      > *:not(:last-child) {
        margin-right: toRem(8);
      }
      &__clickable {
        @include addFocusStyle('false');
        cursor: pointer;
        &:hover {
          color: getColor($electricity, '40');
        }
        &:active {
          color: getColor($electricity, '50');
        }
      }
    }

    margin: var(--tk-input-spacing-height) 0;

  }
  padding: var(--tk-input__container-padding);
  .tk-input__icon {
    font-size: var(--tk-input__icon-font-size);
    margin-right: var(--tk-input__icon-margin-right);
  }
  .tk-input__hide:focus-visible {
    outline-offset: var(
      --tk-input__hide-outline-offset
    ); // defined only on small
  }
  .tk-input__right-decorators {
    font-size: var(--tk-input__icon-font-size);
    > *:not(:last-child) {
      margin-right: var(--tk-input__icon-margin-right);
    }
  }

  &--readonly {
    @include styleInput(
      getColor($--tk-input-color, filledText),
      getColor($--tk-input-color, emptyText),
      getColor($--tk-input-color, readonly),
      getColor($--tk-input-color, readonly),
      getColor($--tk-input-color, readonly),
      getColor($--tk-input-color, readonlyBg)
    );
    .tk-input__hide {
      color: getColor($--tk-input-hide-color, disabled);
    }
  }

  &--disabled {
    @include styleInput(
      getColor($--tk-input-color, disabledText),
      getColor($--tk-input-color, emptyText),
      getColor($--tk-input-color, disabled),
      getColor($--tk-input-color, disabled),
      getColor($--tk-input-color, disabled),
      getColor($--tk-input-color, defaultBg)
    );
    .tk-input__icon {
      // left icon
      outline: none;
      color: getColor($--tk-input-color, disabled); // same as border
    }
    .tk-input__right-decorators {
      // right icons
      color: getColor($--tk-input-color, disabled); // same as border
    }
    .tk-input__hide {
      display: none;
    }
  }
}

textarea.tk-input {
  text-overflow: ellipsis;
  padding-right: toRem(16);
  &:not([rows]) {
    min-height: var(--tk-textarea-min-height);
    padding-right: var(--tk-textarea-padding-right);
  }
}
