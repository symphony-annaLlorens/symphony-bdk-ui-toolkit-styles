/* Define color on current text and eventual font icons */
@mixin addFontIconColor($fontColor) {
  // Icon styling selector takes precendence over the button colors
  &,
  i {
    color: $fontColor;
  }
}

@mixin getButtonStyle(
  $colorMap,
  $textColor,
  $backgroundColor,
  $borderColor: false
) {
  $color: map-get($colorMap, $textColor);
  color: $color;
  background-color: map-get($colorMap, $backgroundColor);
  @if $borderColor {
    @include addBorder(toRem(2), map-get($colorMap, $borderColor));
  }
  .tk-button-icon--loading {
    color: $color;
  }
}

@mixin focus-visible($colorMap, $insetShadow: false) {
  &:focus-visible {
    background-color: map-get($colorMap, focus);
    color: map-get($colorMap, focusText);
    outline: 0;
    @if $insetShadow {
      box-shadow: inset 0 0 0 toRem(2) map-get($colorMap, focusText),
        0 0 0 toRem(1) $--tk-button-focus-shadow,
        0 0 0 toRem(3) #{getColor($electricity, '40')};
    } @else {
      box-shadow: 0 0 0 toRem(1) $--tk-button-focus-shadow,
        0 0 0 toRem(3) #{getColor($electricity, '40')};
    }
  }
}

/* Applies color styles to filled buttons, buttons that do not have borders */
@mixin styleFilledButton($colorMap) {
  background-color: map-get($colorMap, default);
  color: map-get($colorMap, text);
  &:hover {
    @include getButtonStyle($colorMap, hoverText, hover);
  }
  &:active {
    @include getButtonStyle($colorMap, activeText, active);
  }
  &:disabled {
    @include getButtonStyle($colorMap, textDisabled, disabled);
  }
  &:disabled.loading {
    background-color: map-get($colorMap, default);
  }
  &.loading {
    @include getButtonStyle($colorMap, text, default);
  }
  @include focus-visible($colorMap);
}

/* Applies color styles to outline buttons, buttons that do not have a background */
@mixin styleOutlinedButton($colorMap) {
  background-color: transparent;
  color: map-get($colorMap, default);
  @include addBorder(toRem(2), map-get($colorMap, default));
  &:hover {
    @include getButtonStyle($colorMap, hoverText, hover, hoverText);
  }
  &:active {
    @include getButtonStyle($colorMap, activeText, active, activeText);
  }
  &:disabled {
    @include getButtonStyle($colorMap, textDisabled, disabled, disabled);
    background-color: transparent;
  }
  &.loading {
    @include getButtonStyle($colorMap, text, default, default);
    background-color: transparent;
  }
  @include focus-visible($colorMap, true);
}

/* Button sizes */
@mixin condensedButton {
  .condensed {
    :not(.tk-scape-condensed *) {
      &.tk-button--large {
        @include mediumButton; // Large -> medium on condensed
      }
      &.tk-button--medium {
        @include smallButton; // Medium -> small on condensed
      }
    }
  }
}
@mixin smallButton {
  padding: toRem(4) toRem(12);
  height: toRem(24);
  font-size: toRem(12);
  @include iconSizes(toRem(24), toRem(12), toRem(4));
}
@mixin mediumButton {
  padding: toRem(8) toRem(16);
  height: toRem(32);
  font-size: toRem(12);
  @include iconSizes(toRem(32), toRem(16), toRem(8));
}
@mixin largeButton {
  padding: toRem(12) toRem(24);
  height: toRem(40);
  font-size: toRem(14);
  @include iconSizes(toRem(40), toRem(16), toRem(8));
}
@mixin iconSizes($size, $font-size, $margin) {
  &.tk-button--icon {
    min-height: $size;
    min-width: $size;
    &-right > i {
      margin-left: $margin;
    }
    &-left > i {
      margin-right: $margin;
    }
  }
  i {
    font-size: $font-size;
  }
}
